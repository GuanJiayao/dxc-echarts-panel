{"version":3,"sources":["../src/echarts_ctrl.js"],"names":["MetricsPanelCtrl","_","echarts","EchartsCtrl","$scope","$injector","panelDefaults","EchartsOption","IS_MAP","map","USE_URL","USE_FAKE_DATA","fakeData","url","request","updateInterval","maps","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","updateData","that","xmlhttp","data","eval","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","UrlData","JSON","parse","responseText","open","send","$timeout","dataList","IS_DATA_CHANGED","addEditorTab","console","log","path","getPanelPath","System","import","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","echartsData","myChart","init","importMap","setTimeout","resize","clear","setOption","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk'; // eslint-disable-line\nimport _ from 'lodash';\nimport echarts from './libs/echarts.min'; // eslint-disable-line\nimport './libs/echarts-liquidfill.min'; // eslint-disable-line\nimport './libs/echarts-wordcloud.min'; // eslint-disable-line\nimport './libs/dark'; // eslint-disable-line\nimport './css/style.css!'; // eslint-disable-line\nimport './libs/bmap.js'; // eslint-disable-line\nimport './libs/getBmap.js'; // eslint-disable-line\n\nexport class EchartsCtrl extends MetricsPanelCtrl { // eslint-disable-line\n\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        const panelDefaults = {\n            EchartsOption: 'console.log(JSON.stringify(echartsData));\\n\\noption = {};',\n            IS_MAP: false,\n            map: '',\n            USE_URL: false,\n            USE_FAKE_DATA: true,\n            fakeData: '',\n            url: '',\n            request: '',\n            updateInterval: 10000,\n        };\n\n        this.maps = ['世界', '中国', '北京'];\n\n        _.defaults(this.panel, panelDefaults);\n\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on('panel-initialized', this.render.bind(this));\n\n        this.updateData();\n    }\n\n    // post请求\n    updateData() {\n        const that = this;\n        let xmlhttp;\n\n        if (this.panel.USE_URL && this.panel.USE_FAKE_DATA && this.panel.fakeData) {\n            this.data = eval(this.panel.fakeData);\n        } else if (that.panel.USE_URL && !that.panel.USE_FAKE_DATA && that.panel.url && that.panel.request) {\n            if (window.XMLHttpRequest) {\n                xmlhttp = new XMLHttpRequest();\n            } else {\n                xmlhttp = new ActiveXObject('Microsoft.XMLHTTP'); // eslint-disable-line\n            }\n\n            xmlhttp.onreadystatechange = () => {\n                if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {\n                    that.UrlData = JSON.parse(xmlhttp.responseText);\n                    that.onDataReceived();\n                }\n            };\n\n            xmlhttp.open('POST', that.panel.url, true);\n            xmlhttp.send(that.panel.request);\n        } else {\n            xmlhttp = null;\n        }\n\n        this.$timeout(() => {\n            this.updateData();\n        }, that.panel.updateInterval);\n    }\n\n    onDataReceived(dataList) {\n        // this.data = !this.panel.USE_URL && !this.panel.USE_FAKE_DATA ? dataList : this.data;\n        this.data = this.panel.USE_URL && !this.panel.USE_FAKE_DATA ? this.UrlData : this.data;\n\n        this.IS_DATA_CHANGED = true;\n        this.render();\n        this.IS_DATA_CHANGED = false;\n    }\n\n    onDataError() {\n        this.render();\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('数据', 'public/plugins/dxc-echarts-panel/partials/editer-metric.html', 2);\n        this.addEditorTab('Ecahrts配置', 'public/plugins/dxc-echarts-panel/partials/editor-echarts.html', 3);\n    }\n\n    importMap() {\n        console.log(\"This is panel config,\", this.panel);\n        if (!this.panel.IS_MAP) return;\n        let path;\n        switch (this.panel.map) {\n            case '世界':\n                path = this.getPanelPath() + 'libs/world.js';\n                System.import(path); // eslint-disable-line\n                break;\n            case '中国':\n                path = this.getPanelPath() + 'libs/china.js';\n                System.import(path); // eslint-disable-line\n                break;\n            case '北京':\n                path = this.getPanelPath() + 'libs/beijing.js';\n                System.import(path); // eslint-disable-line\n                break;\n            // case '百度地图':\n            //   System.import(this.getPanelPath() + 'libs/bmap.js');\n            //   System.import(this.getPanelPath() + 'libs/getBmap.js');\n            // break;\n            default:\n                break;\n        }\n        console.log(\"Now loaded map with path:\", path);\n    }\n\n    getPanelPath() {\n        // the system loader preprends publib to the url, add a .. to go back one level\n        return `../${grafanaBootData.settings.panels[this.pluginId].baseUrl}/`; // eslint-disable-line\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        const $panelContainer = elem.find('.echarts_container')[0];\n        let option = {}; // eslint-disable-line\n        let echartsData = []; // eslint-disable-line\n\n        ctrl.IS_DATA_CHANGED = true;\n\n        // function setHeight() {\n        //   let height = ctrl.height || panel.height || ctrl.row.height;\n        //   if (_.isString(height)) {\n        //     height = parseInt(height.replace('px', ''), 10);\n        //   }\n        //   // height -= 7;\n        //   // height -= ctrl.panel.title ? 25 : 9;\n        //   $panelContainer.style.height = height + 'px';\n        // }\n\n        // // function setWidth() {\n        // //   let width = document.body.clientWidth;\n        // //   width = (width - 5.6 * 2) * ctrl.panel.span / 12 - 5.6 * 2 - 1 * 2 - 10 * 2;\n        // //   $panelContainer.style.width = width + 'px';\n        // // }\n\n        // setHeight();\n        // // setWidth();\n\n        const myChart = echarts.init($panelContainer, 'dark');\n\n        ctrl.importMap();\n\n        // bad hank\n        setTimeout(() => {\n            myChart.resize();\n        }, 1000);\n\n        function render() {\n            if (!myChart) {\n                return;\n            }\n\n            if (ctrl.IS_DATA_CHANGED) {\n                myChart.clear();\n                echartsData = ctrl.data;\n\n                eval(ctrl.panel.EchartsOption);\n\n                myChart.setOption(option);\n            }\n\n            myChart.resize();\n        }\n\n        this.events.on('render', () => {\n            render();\n            ctrl.renderingCompleted();\n        });\n    }\n}\n\nEchartsCtrl.templateUrl = 'module.html';\n"]}